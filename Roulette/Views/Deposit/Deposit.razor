@using Roulette.Context
@using Roulette.Controllers
@using Roulette.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject AppDbContext AppDbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<div class="main-container">
    <div class="trade-area">
        <div class="trade-container">
            <div class="trade-bag" owner="user">

            </div>
            <div class="trade-bag" owner="site"></div>
        </div>

        <div class="trade-area__hint">
            <span>Add items you want to trade and push "TRADE" button.</span>
        </div>

        <div class="trade-interactive-panel">
            <div class="trade-interactive-panel__info-bar flex-align-right">
                <div class="balance-hint">
                    <span id="balance_hint">0.00$</span>
                </div>
                <div class="balance">
                    <span id="balance">0.00$</span>
                </div>
            </div>

            <button id="confirm_trade" class="trade-button" type="button" name="button" @onclick="async () => await DepositItemAsync()">TRADE</button>

            <div class="trade-interactive-panel__info-bar flex-align-left">
                <div class="balance-hint">
                    <span>
                        Balance
                        <span id="balance_hint">0.00$</span>
                    </span>
                </div>
                <div class="balance">
                    <span id="balance">0.00$</span>
                </div>
                <div class="price-filter"></div>
            </div>
        </div>
    </div>

    <div class="inventory-area">
        <div class="inventory-container">
            <div class="inventory-interactive-panel">
                <div class="search-bar"></div>
                <div class="inventory-info-bar"></div>
                <div class="refresh-btn"></div>
            </div>
            <div class="inventory-bag" owner="user">
                @foreach (var item in items)
                {
                    <div id="@item.id" class="inventory-item">
                        <img class="inventory-item__preview" src="https://steamcommunity-a.akamaihd.net/economy/image/@item.Description.iconURL" alt="">
                        <div class="inventory-item__info">
                            <span>@item.Description.exterior | @item.Description.name</span>
                            <span>@item.Price</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="inventory-container">
            <div class="inventory-interactive-panel">
                <div class="search-bar"></div>
                <div class="inventory-info-bar"></div>
                <div class="refresh-btn"></div>
                <div class="drop-down-menu-btn"></div>
            </div>

            <div class="inventory-bag" owner="site">
            </div>
        </div>
    </div>
</div>


@code{
    SteamUsersModel User;
    string tradeLink;
    float price;
    List<Steam.Item> items = new List<Steam.Item>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;
        var steamId = claims.Where(c => c.Type == "steamID").Select(c => c.Value).SingleOrDefault();
        if (steamId != null)
        {
            User = await AppDbContext.SteamUsers.FindAsync(steamId);
        }
        tradeLink = User.TradeLink ?? string.Empty;

        items = (await DepositController.LoadInventoryAsync(User.SteamID)).Where(item =>
        {
            var check = DepositController.PricesDictionary.TryGetValue(item.Description.market_name, out price);
            if (check)
            {
                item.Price = price;
            }
            return check;
        }).ToList();
        StateHasChanged();
    }



    async Task DepositItemAsync()
    {
    }



}