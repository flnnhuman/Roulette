@using Roulette.Context
@using Roulette.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Roulette.Controllers
@using BlazorPagination
@inject AppDbContext AppDbContext
@inject HistoryController historyController
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<div id="modal-account" class="modal modal-fixed-footer" style="z-index: 1003; display: none; opacity: 0; height: auto;">
	<div class="modal-content modal-content-account">
		<h4>Account</h4>
		<div class="card-panel materialize-red error" style="display: none;">
			<span></span>
		</div>
		<div class="row">
			<div class="row" style="width: 100%;">
				<div class="input-field col s12" s>
					<input id="account-tradeofferurl" @bind="@tradeLink" name="tradeOfferUrl" type="url" class="validate" placeholder="https://steamcommunity.com/tradeoffer/new/?partner=XXXXXXXX&amp;token=XXXXXXXX">
					<label for="account-tradeofferurl" class="active">
						<a href="http://steamcommunity.com/my/tradeoffers/privacy#create_new_url_btn" target="_blank" class="secondary-text lighten">Trade Offer URL (click here for yours)</a>
					</label>
				</div>
				<div id="account-save-btn" class="input-field col s2" style="width: auto;">
					<button class="btn secondary waves-effect" id="saveSettings" @onclick="async () => await SaveSettings()">Save</button>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="row horizon-flex" style="justify-content: space-between;">
				<div class="col s12 m6">
					<div class="card secondary center-align" style="background: #091f34;">
						<div class="card-content content-bg-primary">
							<span class="card-title">$@User?.TotalDeposited</span>
							<p>Total Deposited</p>
						</div>
					</div>
				</div>
				<div class="col s12 m6">
					<div class="card green center-align" style="background: #091f34;">
						<div class="card-content content-bg-pastel-green">
							<span class="card-title">$@User?.TotalWon</span>
							<p>Total Won</p>
						</div>
					</div>
				</div>
			</div>
			<div id="account-drop-btn" class="input-field col s2" style="width: auto;">
				<button class="btn secondary waves-effect" id="dropStats" @onclick="async () => await SaveSettings()">Drop stats</button>
			</div>
		</div>
		<div class="modal-footer">
			<a href="#" class="modal-action modal-close waves-effect waves-red btn-flat modal-close-btn">Close</a>
		</div>
	</div>
</div>

<div id="modal-referral" class="modal modal-fixed-footer" style="z-index: 1003; display: none; opacity: 0; height:70%;width: 70%">
	<div class="modal-content">
		<h4>Referrals</h4>
		<div class="card-panel materialize-red error" style="display: none;">
			<span></span>
		</div>
		<div class="affiliates_panel">
			<div class="affiliates_panel_top">
				<a href="#" class="create_invite" id="change_code">Change code</a>
			</div>
			<div>
				<p class="invite_code" style="position: relative">
					Your invite code: <span id="mycode">CODE</span><span class="window_copy_button copy_click" elem="#myreflink" copied="true">Copy ref link</span>
					<input type="text" disabled="" value="https://localhost:5001/?r=CODE" id="myreflink" style="display:none">
				</p>

			</div>
			<div class="affiliates_info">
				<div class="affiliates_info_unit">
					<h3><span>Affiliate Level</span></h3>
					<div class="affiliates_info_unit_description">
						<span class="affiliates_rank bronze">Bronze</span>
						<span>(1 coin per 300 bet)</span>
					</div>
				</div>
				<div class="affiliates_info_unit">
					<h3><span>Referrals count</span></h3>
					<div class="affiliates_info_unit_description">
						<span class="visitors">0</span>
					</div>
				</div>
				<div class="affiliates_info_unit">
					<h3><span>Referral level</span></h3>
					<div class="affiliates_info_unit_description">
						<span>0/5 units</span>
					</div>
				</div>
				<div class="affiliates_info_unit">
					<h3><span>Total income</span></h3>
					<div class="affiliates_info_unit_description">
						<strong>0</strong>
					</div>
				</div>
			</div>
		</div>

		<div class="modal-footer">
			<a href="#" class="modal-action modal-close waves-effect waves-red btn-flat modal-close-btn">Close</a>
		</div>
	</div>
</div>

<div id="modal-history" class="modal modal-fixed-footer" style="z-index: 1003; display: none; opacity: 0; height:480px;">
	<div class="history-main-container" style="position: relative">
		<h4>History (last 100)</h4>

		<div class="history-list__header">
			<span>Round ID</span>
			<span>Result</span>
			<span>Total payouts</span>
		</div>
		<ul class="history-list">
			@if (_data == null) {
				<p><em>Loading...</em></p>
			}
			else {
				foreach (var item in _data.Results) {
					<li class="history-snapshot">
						<span>@item.Id</span>
						<div class="history-snapshot__result">
							<svg viewBox="0 0 30 30" version="1.1" xmlns="http://www.w3.org/2000/svg">
								@{
									if (item.WonColor == Color.Black) {
										<circle fill="#444444" cx="15" cy="15" r="15" />
									}
									else if (item.WonColor == Color.Green) {
										<circle fill="#6fb26b" cx="15" cy="15" r="15" />
									}
									else {
										<circle fill="#b04a43" cx="15" cy="15" r="15" />
									}
								}
							</svg>
							<span>@item.WonNumber</span>
						</div>
						<div class="history-snapshot__payout">
							<svg width="13" height="14" viewBox="0 0 13 14" fill="none">
								<path d="M6.33301 7.51634C3.44486 7.51634 1.03495 6.46477 0.463394 5.06445C0.378554 5.27075 0.333008 5.48419 0.333008 5.70299C0.333008 7.41051 3.01932 8.7952 6.33301 8.7952C9.64625 8.7952 12.333 7.41051 12.333 5.70299C12.333 5.48419 12.2866 5.27075 12.2031 5.06445C11.6297 6.46477 9.21981 7.51634 6.33301 7.51634Z"
									  fill="#cc920a"></path>
								<path d="M6.33301 9.73704C3.44486 9.73704 1.03495 8.68502 0.463394 7.2856C0.378554 7.49145 0.333008 7.70534 0.333008 7.92458C0.333008 9.63166 3.01932 11.0159 6.33301 11.0159C9.64625 11.0159 12.333 9.63166 12.333 7.92458C12.333 7.70534 12.2866 7.49145 12.2031 7.28516C11.6297 8.68502 9.21981 9.73704 6.33301 9.73704Z"
									  fill="#cc920a"></path>
								<path d="M6.33301 12.0295C3.44486 12.0295 1.03495 10.9784 0.463394 9.57715C0.378554 9.78389 0.333008 9.99778 0.333008 10.2166C0.333008 11.9241 3.01932 13.3079 6.33301 13.3079C9.64625 13.3079 12.333 11.9241 12.333 10.2166C12.333 9.99778 12.2866 9.78389 12.2031 9.57715C11.6297 10.9788 9.21981 12.0295 6.33301 12.0295Z"
									  fill="#cc920a"></path>
								<path d="M6.33325 6.51564C9.64696 6.51564 12.3333 5.13161 12.3333 3.42432C12.3333 1.71704 9.64696 0.333008 6.33325 0.333008C3.01954 0.333008 0.333252 1.71704 0.333252 3.42432C0.333252 5.13161 3.01954 6.51564 6.33325 6.51564Z"
									  fill="#cc920a"></path>
							</svg>
							<span>@(item?.AllBets.Where(x => x.Color == item.WonColor).Sum(x => x.Amount) ?? 0.0f)</span>
						</div>
						<button class="default-btn" @onclick="() => { OpenSnapshotModal(item.Id); }">Details</button>
					</li>
				}
			}
		</ul>
		<div class="modal-footer">
			<a href="#" class="modal-action modal-close waves-effect waves-red btn-flat modal-close-btn">Close</a>
		</div>
	</div>
</div>

<div id="modal-history-snapshot" class="modal modal-fixed-footer" style="z-index: 1003; display: none; opacity: 0; transform: scaleX(0.7); top: 0px;height:480px;">
	<div class="history-main-container" style="position: relative">

		<div class="hist-snapshot-frame">
			<div class="hist-snapshot-container">
				<div class="hist-snapshot-roulette-area">
					<div class="hist-snapshot-roulette-wrapper">
						<div class="hist-snapshot-roulette" style="background: url('./img/cases.png'); background-position: @string.Format("{0}px", offset);"></div>
					</div>
					<div class="hist-snapshot-roulette-rod"></div>
				</div>

				<div class="hist-snapshot-stakes">
					<div class="hist-snapshot-stakes__winner-mark">
						<div class="winner-mark dummy-mark"><span>↘ WINNERS</span></div>
						<div class="winner-mark"><span>↘ WINNERS</span></div>
						<div class="winner-mark dummy-mark"><span>↘ WINNERS</span></div>
					</div>

					<div class="hist-snapshot-stakes__header">
						<div class="st-header color--red">
							<span>Player</span>
							<span>Bet</span>
						</div>
						<div class="st-header color--green">
							<span>Player</span>
							<span>Bet</span>
						</div>
						<div class="st-header color--black">
							<span>Player</span>
							<span>Bet</span>
						</div>
					</div>

					<div class="hist-snapshot-stakes__players">
						<ul class="hist-snapshot-stakes__players-team">
							<li class="st-player-bet">
								<span>Loliandrii17</span>
								<span>14.88</span>
							</li>
						</ul>

						<ul class="hist-snapshot-stakes__players-team">
						</ul>

						<ul class="hist-snapshot-stakes__players-team">
						</ul>
					</div> <!-- players section end -->
				</div> <!-- stakes section end -->
			</div>
		</div>

	</div>
</div>
 
@if (User?.SteamID == "76561198181370493" || User?.SteamID == "76561198181370493")
{
	<div id="modal-admin" class="modal modal-fixed-footer" style="z-index: 1003; display: none; opacity: 0; height:480px;">
        <div class="admin-grid">
          <div class="admin-control-panel">
            <div class="flex">
              <span>Predefine next round result:</span>
              <input type="number" min="0" max="14" name="nr_res" value="1" placeholder="1" style="color: white; text-indent: 15px">
            </div>
            <button type="button" name="button">Apply</button>
          </div>
          <div class="admin-control-panel">
            <div class="flex">
              <span>Enable chat:</span>
              <input type="checkbox" name="en_chat" checked>
            </div>
          </div>
          <div class="admin-control-panel"></div>
          <div class="admin-control-panel"></div>
          <div class="admin-control-panel"></div>
        </div>
	</div>
}

@code{
	SteamUsersModel User;
	string tradeLink = "";
	private PagedResult<GameModel> _data;
	private string _filter;
	private int _page = 1;
	private double offset = 0.0;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;
		var steamId = claims.Where(c => c.Type == "steamID").Select(c => c.Value).SingleOrDefault();
		if (steamId != null) {
			User = await AppDbContext.SteamUsers.FindAsync(steamId);
			tradeLink = User.TradeLink ?? string.Empty;
			StateHasChanged();
		}
		await GetData();
	}

	private async Task GetData() {
		_data = await historyController.GetLastGames(_page, 20);
		StateHasChanged();
	}

	protected override async void OnAfterRender(bool firstRender) {
		await base.OnAfterRenderAsync(firstRender);

		if (firstRender) {
			await JsRuntime.InvokeVoidAsync("AddModal");

			StateHasChanged();
		}
	}

	async Task SaveSettings() {
		User.TradeLink = tradeLink;
		AppDbContext.SteamUsers.Update(User);
		await AppDbContext.SaveChangesAsync();
	}

	void OpenSnapshotModal(long id) {
		var result = _data.Results.First(x => x.Id == id);
		offset = result.WonNumber;
		StateHasChanged();

		NavigationManager.NavigateTo("/#modal-history-snapshot");
	}

}
