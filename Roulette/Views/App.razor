@using Microsoft.AspNetCore.SignalR.Client
@using Roulette.Context
@using Roulette.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Globalization
@inject IJSRuntime JsRuntime
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppDbContext AppDbContext
<button class="btn btn-success" @onclick="async () => await ConnectToServerAsync()" disabled="@isConnected">Connect</button>

<main>

    <div class="container" style="margin-left: 10%;">
        <div class="row">

            <div class="col s8" style="width: 87.49%;">
                <div class="card-panel">
                    <div class="timer" style="background-color: #ba554a;width: 100%;height: 20px;">
                        <span class="progress_timer"></span>
                    </div>
                </div>
            </div>
            <div class="col s12">
                <div class="card-panel" id="roulette">
                    <div class="wheel">
                        <div id="case" style="" class="0">
                            <div id="pointer">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="" style="width: 86.4%;float: left;padding: 0 0 0 12px;">
                <div class="card-panel">
                    <div style="text-align: center;">
                        <div id="past">
                            @foreach (var roll in history)
                            {
                                if (roll == 0)
                                {
                                    <div class='ball ball-0'>@roll</div>
                                }
                                else if (roll <= 7)
                                {
                                    <div class='ball ball-1'>@roll</div>
                                }
                                else
                                {
                                    <div class='ball ball-8'>@roll</div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="" style="float: left; width: 86.4%; padding: 0 0 0 12px;">
                <div class="card-panel" style="display: flex; justify-content: space-between; align-items: center">
                    <div id="balance" style="width: 20%">Balance: @Balance</div>
                    <input id="betAmount" @bind="@betAmount" type="number" placeholder="Bet Amount" step="0.01" style="width: 20%">
                    <button class="btn red" style="width: 10%">clear</button>
                    <button class="btn red" style="width: 10%">+10</button>
                    <button class="btn red" style="width: 10%">+100</button>
                    <button class="btn red" style="width: 10%">1/2</button>
                    <button class="btn red" style="width: 10%">х2</button>
                    <button class="btn red" style="width: 10%">МАХ</button>
                </div>
            </div>
            <div class="col s8" style="width: 87.49%;" id="betButtons">
                <div class="card-panel">

                    <button class="btn red" id="red" @onclick="async () => await PlaceBet(Color.Red)" disabled="@isRolling">1-7</button>
                    <button class="btn green" id="green" @onclick="async () => await PlaceBet(Color.Green)" disabled="@isRolling">0</button>
                    <button class="btn black" id="black" @onclick="async () => await PlaceBet(Color.Black)" disabled="@isRolling">8-14</button>
                </div>
            </div>
            <div class="col s8" style="width: 87.49%;">
                <div class="card-panel">
                    <div class="rows">
                        <div class="redbet">
                            <div class="row">
                                <div class="name" style="float: left;">Player</div>
                                <div class="bet" style="float: right;">Bet</div>
                            </div>
                            @{
                                foreach (var bet in redBets)
                                {
                                    <div class="row" id="bet">
                                        <div class="name" style="float: left;"> @bet.SteamID </div>
                                        <div class="bet" style="float: right;"> @bet.amount </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="greenbet">
                            <div class="row">
                                <div class="name" style="float: left;">Player</div>
                                <div class="bet" style="float: right;">Bet</div>
                            </div>
                            @{
                                foreach (var bet in GreenBets)
                                {
                                    <div class="row" id="bet">
                                        <div class="name" style="float: left;"> @bet.SteamID </div>
                                        <div class="bet" style="float: right;"> @bet.amount </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="blackbet">
                            <div class="row">
                                <div class="name" style="float: left;">Player</div>
                                <div class="bet" style="float: right;">Bet</div>
                            </div>
                            @{
                                foreach (var bet in BlackBets)
                                {
                                    <div class="row" id="bet">
                                        <div class="name" style="float: left;"> @bet.SteamID </div>
                                        <div class="bet" style="float: right;"> @bet.amount </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>

</main>


@code {
    List<int> history = new List<int>();
    List<Bet> redBets = new List<Bet>();
    List<Bet> GreenBets = new List<Bet>();
    List<Bet> BlackBets = new List<Bet>();
    int _currentNumber; // todo get lask from database
    readonly string url = "http://localhost:63945/notificationhub"; //todo move to config

    HubConnection _connection;
    bool isConnected;
    string betAmount;
    bool isRolling;
    string SteamID;
    double Balance;


    private async Task ConnectToServerAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;

        _connection.Closed += async s =>
        {
            isConnected = false;
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<string>("roll", async m =>
        {
            var args = m.Split('/');
            await Roll(args[0], args[1]);
            StateHasChanged();
        });
        _connection.On<string>("timer", async m =>
        {
            await UpdateBalance();
            await Timer(m);
            StateHasChanged();
        });
        _connection.On<string>("rollHistory", m =>
        {
            history = m.Split(',').Select(int.Parse).ToList();
            StateHasChanged();
        });
        _connection.On<string>("BetsList", m =>
        {
            var abc = JsonConvert.DeserializeObject<List<Bet>>(m);
            redBets = abc.Where(bet => bet.Color == Color.Red).OrderBy(bet => bet.amount).ToList();
            GreenBets = abc.Where(bet => bet.Color == Color.Green).OrderBy(bet => bet.amount).ToList();
            BlackBets = abc.Where(bet => bet.Color == Color.Black).OrderBy(bet => bet.amount).ToList();
            StateHasChanged();
        });
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await ConnectToServerAsync();
            await JsRuntime.InvokeVoidAsync("console.log", "connected");
            await JsRuntime.InvokeVoidAsync("Resize");
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;
        var steamId = claims.Where(c => c.Type == "steamID").Select(c => c.Value).SingleOrDefault();
        if (steamId != null)
        {
            SteamID = steamId;
            Balance = AppDbContext.SteamUsers.Find(steamId).Balance;
        }
    }

    private async Task Timer(string value)
    {
        await JsRuntime.InvokeVoidAsync("Bar", int.Parse(value));
    }


    private async Task Roll(string value, string rolltime)
    {
        isRolling = true;
        StateHasChanged();
        var number = int.Parse(value);

        const int numWidth = 1050 / 15;
        var layout = new List<int> {1, 14, 2, 13, 3, 12, 4, 0, 11, 5, 10, 6, 9, 7, 8};
        Console.WriteLine(number);

        int GetMoves()
        {
            var to = layout.IndexOf(number);
            var at = layout.IndexOf(_currentNumber);
            if (to > at)
            {
                return to - at;
            }
            return layout.Count - at + to;
        }

        var currentPos = await JsRuntime.InvokeAsync<int>("GetCurrentPos");

        await JsRuntime.InvokeVoidAsync("Animate", currentPos, numWidth, 30 + GetMoves(), int.Parse(rolltime));
        await Task.Delay(TimeSpan.FromSeconds(int.Parse(rolltime)));
        _currentNumber = number;
        isRolling = false;
        StateHasChanged();
    }

    public async Task UpdateBalance()
    {
        if (SteamID != null)
        {
            Balance = (await AppDbContext.SteamUsers.FindAsync(SteamID)).Balance;
            StateHasChanged();
        }
        else
        {
            Balance = 0;
        }
    }

    public async Task PlaceBet(Color color)
    {
        float ou;
        if (SteamID != null && !string.IsNullOrEmpty(betAmount) && float.TryParse(betAmount, NumberStyles.Number, CultureInfo.InvariantCulture, out ou) && ou > 0.01)
        {
            await _connection.SendAsync("placebet", string.Format("{0},{1},{2},{3}", SteamID, color, betAmount, _connection.ConnectionId));

            var user = await AppDbContext.SteamUsers.FindAsync(SteamID);
            if (user != null)
            {
                user.Balance -= ou;
                AppDbContext.SteamUsers.Update(user);
                await AppDbContext.SaveChangesAsync();
            }
            Balance -= ou;
            StateHasChanged();
        }
    //todo send warning to login
    }

}