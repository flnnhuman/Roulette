@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JsRuntime
<button class="btn btn-success" @onclick="async () => await ConnectToServerAsync()" disabled="@isConnected">Connect</button>

@code {

    protected override async void OnAfterRender(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await ConnectToServerAsync();
            await JsRuntime.InvokeVoidAsync("console.log", "connected");
            await JsRuntime.InvokeVoidAsync("Resize");
            StateHasChanged();
        }
    }

    int _currentNumber = 0; // todo get lask from database
    readonly string url = "http://localhost:63945/notificationhub"; //todo move to config

    HubConnection _connection;
    bool isConnected;

    private async Task ConnectToServerAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;

        _connection.Closed += async (s) =>
        {
            isConnected = false;
            await _connection.StartAsync();
            isConnected = true;
        };

        _connection.On<string>("roll", async m =>
        {
            var args = m.Split('/');
            await Roll(args[0], args[1]);
            StateHasChanged();
        });
        _connection.On<string>("timer", async m =>
        {
            await Timer(m);
            StateHasChanged();
        });
    }


    private async Task Timer(string value)
    {
        await JsRuntime.InvokeVoidAsync("Bar", int.Parse(value));
    }


    private async Task Roll(string value, string rolltime)
    {
        var number = int.Parse(value);

        const int numWidth = 1050 / 15;
        var layout = new List<int> {1, 14, 2, 13, 3, 12, 4, 0, 11, 5, 10, 6, 9, 7, 8};
        Console.WriteLine(number);

        int GetMoves()
        {
            var to = layout.IndexOf(number);
            var at = layout.IndexOf(_currentNumber);
            if (to > at)
            {
                return to - at;
            }
            return layout.Count - at + to;
        }

        var currentPos = await JsRuntime.InvokeAsync<int>("GetCurrentPos");

        await JsRuntime.InvokeVoidAsync("Animate", currentPos, numWidth, 30 + GetMoves(), int.Parse(rolltime));
        _currentNumber = number;
    }

}