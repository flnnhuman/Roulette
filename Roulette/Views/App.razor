@using Microsoft.AspNetCore.SignalR.Client
@using Roulette.Context
@using Roulette.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using System.Globalization
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppDbContext AppDbContext
<button class="btn btn-success" @onclick="async () => await ConnectToServerAsync()" disabled="@isConnected">Connect</button>

<main>

    <div class="container" style="margin-left: 10%;">
        <div class="row">

            <div class="col s8" style="width: 87.49%;">
                <div class="card-panel">
                    <div class="timer" style="background-color: #ba554a;width: 100%;height: 20px;">
                        <span class="progress_timer"></span>
                    </div>
                </div>
            </div>
            <div class="col s12">
                <div class="card-panel" id="roulette">
                    <div class="wheel">
                        <div id="case" style="" class="0">
                            <div id="pointer">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="" style="width: 86.4%;float: left;padding: 0 0 0 12px;">
                <div class="card-panel">
                    <div style="text-align: center;">
                        <div id="past">
                            @foreach (var roll in history)
                            {
                                if (roll == 0)
                                {
                                    <div class='ball ball-0'>@roll</div>
                                }
                                else if (roll <= 7)
                                {
                                    <div class='ball ball-1'>@roll</div>
                                }
                                else
                                {
                                    <div class='ball ball-8'>@roll</div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="" style="float: left; width: 86.4%; padding: 0 0 0 12px;">
                <div class="card-panel" style="display: flex; justify-content: space-between; align-items: center">
                    <div id="balance" style="width: 20%">Balance: @Balance</div>
                    <input id="betAmount" @bind="@betAmount" type="number" placeholder="Bet Amount" step="0.01" style="width: 20%">
                    <button class="btn red" style="width: 10%">clear</button>
                    <button class="btn red" style="width: 10%">+10</button>
                    <button class="btn red" style="width: 10%">+100</button>
                    <button class="btn red" style="width: 10%">1/2</button>
                    <button class="btn red" style="width: 10%">х2</button>
                    <button class="btn red" style="width: 10%">МАХ</button>
                </div>
            </div>
            <div class="col s8" style="width: 87.49%;" id="betButtons">
                <div class="card-panel">

                    <button class="btn red" id="red" @onclick="async () => await PlaceBetAsync(Color.Red)" disabled="@isRolling">1-7</button>
                    <button class="btn green" id="green" @onclick="async () => await PlaceBetAsync(Color.Green)" disabled="@isRolling">0</button>
                    <button class="btn black" id="black" @onclick="async () => await PlaceBetAsync(Color.Black)" disabled="@isRolling">8-14</button>
                </div>
            </div>
            <div class="col s8" style="width: 87.49%;">
                <div class="card-panel">
                    <div class="rows">
                        <div class="redbet">
                            <div class="row">
                                <div class="name" style="float: left;">Player</div>
                                <div class="bet" style="float: right;">Bet</div>
                            </div>
                            @{
                                foreach (var bet in redBets)
                                {
                                    <div class="row" id="bet">
                                        <div class="name" style="float: left;"> @bet.SteamID </div>
                                        <div class="bet" style="float: right;"> @bet.Amount </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="greenbet">
                            <div class="row">
                                <div class="name" style="float: left;">Player</div>
                                <div class="bet" style="float: right;">Bet</div>
                            </div>
                            @{
                                foreach (var bet in GreenBets)
                                {
                                    <div class="row" id="bet">
                                        <div class="name" style="float: left;"> @bet.SteamID </div>
                                        <div class="bet" style="float: right;"> @bet.Amount </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="blackbet">
                            <div class="row">
                                <div class="name" style="float: left;">Player</div>
                                <div class="bet" style="float: right;">Bet</div>
                            </div>
                            @{
                                foreach (var bet in BlackBets)
                                {
                                    <div class="row" id="bet">
                                        <div class="name" style="float: left;"> @bet.SteamID </div>
                                        <div class="bet" style="float: right;"> @bet.Amount </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>

</main>
<div id="nav-chat" class="sidenav right right-aligned hide-on-med-and-down" style="width: 350px; right: 0px;">
    <nav class="primary">
        <div class="nav-wrapper white-text z-depth-1 center-align">
            <span class="sidenav-close" style="position: absolute; right: 0;">
                <a href="#" class="material-icons white-text">close</a>
            </span>
        </div>
    </nav>
    <ol class="discussion wrapper" id="navChat">
        @{
            foreach (var message in ChatMessages)
            {
                if (message.SteamId == SteamID)
                {
                    <li class="self">
                        <div class="avatar">
                            <a href="http://steamcommunity.com/profiles/@message.SteamId" target="_blank">
                                <img src="@message.Avatar" class="circle">
                            </a>
                        </div>
                        <div class="messages">
                            <p>@message.Message</p>@GetLocalDateTime(message.TimeStamp, offset).ToString("HH:mm:ss")
                        </div>
                    </li>
                }
                else
                {
                    <li class="other">
                        <div class="avatar">
                            <a href="http://steamcommunity.com/profiles/@message..User.SteamID" target="_blank">
                                <img src="@message.Avatar" class="circle">
                            </a>
                        </div>
                        <div class="messages">
                            <h1>@message.PersonaName</h1>
                            <p>@message.Message</p>@GetLocalDateTime(message.TimeStamp, offset).ToString("HH:mm:ss")
                        </div>
                    </li>
                }
            }
        }
    </ol>
    <ol class="discussion input">
        <li class="self input">
            <div class="avatar">

                @if (!string.IsNullOrEmpty(avatarLink))
                {
                    <img src="@avatarLink" class="circle" id="chat-user-avatar">
                }
                else
                {
                    <img src="https://steamuserimages-a.akamaihd.net/ugc/109607797346317755/F7B06C602744549F7C64A6AC4C90444C1A79C03A/" class="circle" id="chat-user-avatar">
                }

            </div>


            <div class="messages">


                <textarea id="user-message" class="materialize-textarea" rows="1"  disabled="@string.IsNullOrEmpty(SteamID)"
                @bind-value="chatInput" @bind-value:event="oninput" placeholder="Send a message"
                @onkeydown="async e => await SendMessageAsync(e)" ></textarea>
            </div>
        </li>
    </ol>
</div>


@code {
    List<int> history = new();
    List<BetModel> redBets = new();
    List<BetModel> GreenBets = new();
    List<BetModel> BlackBets = new();
    private TimeSpan? _userOffset;
    List<MessageModel> ChatMessages = new();
    int _currentNumber; // todo get lask from database
    readonly string url = "http://localhost:5002/notificationhub"; //todo move to config

    HubConnection _connection;
    bool isConnected;
    string betAmount;
    bool isRolling;
    string SteamID;
    double Balance;
    string avatarLink;
    string chatInput;
    int offset;
    SteamUsersModel User;


    private async Task ConnectToServerAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        isConnected = true;

        await _connection.SendAsync("GetGamesHistory");
        await _connection.SendAsync("GetTimer");
        
        _connection.Closed += async s =>
        {
            isConnected = false;
            await _connection.StartAsync();
            isConnected = true;
        };
        
        _connection.On<string>("roll", async m =>
        {
            var args = m.Split('/');
            await RollAsync(args[0], args[1]);
            StateHasChanged();
        });
        _connection.On<string>("timer", async m =>
        {
            await UpdateBalanceAsync();
            await StartTimerAsync(m);
            StateHasChanged();
        });
        _connection.On<string>("GetTimer", async m =>
        { 
            var args = m.Split('/');
            var secondFromTheStart = double.Parse(args[0], CultureInfo.InvariantCulture);
            await JsRuntime.InvokeVoidAsync("console.log", secondFromTheStart);
            if (secondFromTheStart > 25)
            {
                if (secondFromTheStart < 29)
                {
                    //await RollAsync(args[1], (secondTillNextRound-1).ToString(CultureInfo.InvariantCulture));
                }
            }
            else
            {
                JsRuntime.InvokeAsync<int>("GetCurrentPos");
                await StartTimerAsync((25 - secondFromTheStart).ToString(CultureInfo.InvariantCulture));
            }
            
            StateHasChanged();
        });
        _connection.On<string>("RollHistory", m =>
        {
            history = m.Split(',').Select(int.Parse).ToList();
            StateHasChanged();
        });
        _connection.On<string>("BetsList", m =>
        {
            var abc = JsonConvert.DeserializeObject<List<BetModel>>(m);
            redBets = abc.Where(bet => bet.Color == Color.Red).OrderBy(bet => bet.Amount).ToList();
            GreenBets = abc.Where(bet => bet.Color == Color.Green).OrderBy(bet => bet.Amount).ToList();
            BlackBets = abc.Where(bet => bet.Color == Color.Black).OrderBy(bet => bet.Amount).ToList();
            StateHasChanged();
        });
        _connection.On<string>("chatmessage", m =>
        {
            var message = JsonConvert.DeserializeObject<MessageModel>(m);
            ChatMessages.Add(message);
            StateHasChanged();
        });
        _connection.On<string>("ChatHistory", m =>
        {
            List<MessageModel> messages = JsonConvert.DeserializeObject<List<MessageModel>>(m);
            ChatMessages = messages;
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await ConnectToServerAsync();
            await JsRuntime.InvokeVoidAsync("Resize");
            offset = await GetOffset();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var claims = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Claims;
        var steamId = claims.Where(c => c.Type == "steamID").Select(c => c.Value).SingleOrDefault();
        if (steamId != null)
        {
            User = await AppDbContext.SteamUsers.FindAsync(steamId);
            if (User != null)
            {
                SteamID = steamId;
                Balance = User.Balance;
                avatarLink = User.avatar;
            }
        }
    }

    private async Task StartTimerAsync(string value)
    {
        await JsRuntime.InvokeVoidAsync("Bar", double.Parse(value, CultureInfo.InvariantCulture));
    }

    private async Task RollAsync(string value, string rolltime)
    {
        isRolling = true;
        StateHasChanged();
        var number = int.Parse(value);

        const int numWidth = 1050 / 15;
        var layout = new List<int> {1, 14, 2, 13, 3, 12, 4, 0, 11, 5, 10, 6, 9, 7, 8};
        Console.WriteLine(number);

        int GetMoves()
        {
            var to = layout.IndexOf(number);
            var at = layout.IndexOf(_currentNumber);
            if (to > at)
            {
                return to - at;
            }
            return layout.Count - at + to;
        }

        var currentPos = await JsRuntime.InvokeAsync<int>("GetCurrentPos");

        await JsRuntime.InvokeVoidAsync("Animate", currentPos, numWidth, 30 + GetMoves(), int.Parse(rolltime));
        await Task.Delay(TimeSpan.FromSeconds(int.Parse(rolltime)));
        _currentNumber = number;
        isRolling = false;
        StateHasChanged();
    }

    async Task UpdateBalanceAsync()
    {
        if (SteamID != null)
        {
            Balance = (await AppDbContext.SteamUsers.FindAsync(SteamID)).Balance;
            StateHasChanged();
        }
        else
        {
            Balance = 0;
        }
    }

    async Task PlaceBetAsync(Color color)
    {
        float ou;
        if (SteamID != null && !string.IsNullOrEmpty(betAmount) && float.TryParse(betAmount, NumberStyles.Number, CultureInfo.InvariantCulture, out ou) && ou > 0.01)
        {
            await _connection.SendAsync("placebet", JsonConvert.SerializeObject(new BetModel {SteamID = SteamID, Color = color, Amount = ou, ConnectionId = _connection.ConnectionId}));

            var user = await AppDbContext.SteamUsers.FindAsync(SteamID);
            if (user != null)
            {
                user.Balance -= ou;
                AppDbContext.SteamUsers.Update(user);
                await AppDbContext.SaveChangesAsync();
            }
            Balance -= ou;
            StateHasChanged();
        }
    //todo send warning to login
    }

    async Task SendMessageAsync(KeyboardEventArgs args)
    {
        if (chatInput.Length > 500) 
        {
            StateHasChanged();
            chatInput = string.Empty;
            return;
        }
        if (args.Code == "Enter")
        {
            var message = new MessageModel {SteamId = SteamID, Avatar = avatarLink, PersonaName = User.personaname, Message = chatInput, TimeStamp = DateTime.UtcNow};
            await _connection.SendAsync("chatmessage", JsonConvert.SerializeObject(message));

            StateHasChanged();
            chatInput = string.Empty;
        }
    }

    public async Task<int> GetOffset()
    {
        var offsetInMinutes = await JsRuntime.InvokeAsync<int>("blazorGetTimezoneOffset");
        return offsetInMinutes;
    }

    public DateTimeOffset GetLocalDateTime(DateTimeOffset dateTime, int Offset)
    {
        if (_userOffset == null)
        {
            _userOffset = TimeSpan.FromMinutes(-Offset);
        }

        return dateTime.ToOffset(_userOffset.Value);
    }

}